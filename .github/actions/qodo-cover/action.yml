name: Qodo Cover
description: "Gets the diff of a PR, posts it as a comment, checks out the PR branch, and counts lines of code."
author: QodoAI

inputs:
  greeting:
    description: "Custom greeting message for the PR comment"
    required: false
    default: "Hello"
  github_token:
    description: "GitHub token for authentication"
    required: true
  project_language:
    description: "Language of the project"
    required: false
    default: "python"
  project_root:
    description: "Root directory of the project"
    required: false
    default: "."
  code_coverage_report_path:
    description: "Path to the coverage.xml"
    required: false
    default: "./coverage.xml"
  test_command:
    description: "Command to run tests, e.g. 'pytest --cov=. --cov-report=xml --cov-report=term'"
    required: true
  model:
    description: "LLM model name, e.g. 'gpt-4o'"
    required: false
    default: "gpt-4o"

runs:
  using: "composite"
  steps:

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install jedi-language-server
      run: |
        pip install jedi-language-server
      shell: bash

    - name: Get PR Diff
      run: |
        gh pr diff ${{ github.event.pull_request.number }} > /tmp/pr_diff.txt
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      shell: bash

    - name: Install Jinja2 CLI
      run: |
        pip install jinja2-cli
      shell: bash

    - name: Populate PR Comment with Jinja2
      run: |
        jinja2 ${{ github.action_path }}/comment_template.j2 -D greeting="${{ inputs.greeting }}" -D diff="$(cat /tmp/pr_diff.txt)" > /tmp/comment_body.txt
      shell: bash

    - name: Post PR Diff Comment
      run: |
        gh pr comment ${{ github.event.pull_request.number }} -F /tmp/comment_body.txt
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      shell: bash

    - name: Configure Git Identity
      run: |
        git config --global user.email "cover-bot@qodo.ai"
        git config --global user.name "Qodo Cover"
      shell: bash

    - name: Compute current timestamp
      id: timestamp
      run: echo "timestamp=$(date +%s)" >> $GITHUB_ENV
      shell: bash

    - name: Create a new branch
      run: |
        git checkout -b qodo-cover-${{ env.timestamp }}
      shell: bash

    - name: Run cover-agent-pro
      run: |
        ${{ github.action_path }}/bin/cover-agent-pro \
          --project-language ${{ inputs.project_language }} \
          --project-root ${{ github.workspace }}/${{ inputs.project_root }} \
          --code-coverage-report-path ${{ github.workspace }}/${{ inputs.code_coverage_report_path }} \
          --test-command ${{ inputs.test_command }} \
          --model ${{ inputs.model }}
      env:
        <<: ${{ toJSON(env) }}
      shell: bash

    - name: Push the branch
      run: |
        git push origin qodo-cover-${{ env.timestamp }}
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      shell: bash

    - name: Create a PR from the new branch
      run: |
        gh pr create --base ${{ github.event.pull_request.head.ref }} \
                     --head qodo-cover-${{ env.timestamp }} \
                     --title "Qodo Cover Update: ${{ env.timestamp }}" \
                     --body "Patch on #${{ github.event.pull_request.number }}: this PR updates now.txt with the current timestamp."
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      shell: bash