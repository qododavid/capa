name: Qodo Cover
description: "Gets the diff of a PR, posts it as a comment, checks out the PR branch, and counts lines of code."
author: QodoAI

inputs:
  greeting:
    description: "Custom greeting message for the PR comment"
    required: false
    default: "Hello"
  github_token:
    description: "GitHub token for authentication"
    required: true

runs:
  using: "composite"
  steps:

    - name: Check if local files are present
      run: ls -la ${{ github.action_path }}
      shell: bash

    - name: Get the action repo
      uses: actions/checkout@v3
      with:
        repository: qododavid/capa
        path: capa
        ref: v1
        fetch-depth: 0

    - name: Store the action repo in /tmp/
      run: mv capa  /tmp/
      shell: bash

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get PR Diff
      run: |
        gh pr diff ${{ github.event.pull_request.number }} > /tmp/pr_diff.txt
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      shell: bash

    - name: Install Jinja2 CLI
      run: |
        pip install jinja2-cli
      shell: bash

    - name: Populate PR Comment with Jinja2
      run: |
        jinja2 /tmp/capa/.github/actions/qodo-cover/comment_template.j2 -D greeting="${{ inputs.greeting }}" -D diff="$(cat /tmp/pr_diff.txt)" > /tmp/comment_body.txt
      shell: bash

    - name: Post PR Diff Comment
      run: |
        gh pr comment ${{ github.event.pull_request.number }} -F /tmp/comment_body.txt
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      shell: bash

    - name: Count Lines of Code
      run: |
        total=$(find . -type f -name "*.py" -exec wc -l {} + | awk '{total += $1} END {print total}')
        echo "Total lines of code: $total"
      shell: bash

    - name: Configure Git Identity
      run: |
        git config --global user.email "cover-bot@qodo.ai"
        git config --global user.name "Qodo Cover"
      shell: bash

    - name: Compute current timestamp
      id: timestamp
      run: echo "timestamp=$(date +%s)" >> $GITHUB_ENV
      shell: bash

    - name: Create a new branch
      run: |
        git checkout -b qodo-cover-${{ env.timestamp }}
      shell: bash

    - name: Create now.txt and add timestamp
      run: |
        echo "${{ env.timestamp }}" > now.txt
        git add now.txt
        git commit -m "update now.txt"
      shell: bash

    - name: Push the branch
      run: |
        git push origin qodo-cover-${{ env.timestamp }}
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      shell: bash

    - name: Create a PR from the new branch
      run: |
        gh pr create --base ${{ github.event.pull_request.head.ref }} \
                     --head qodo-cover-${{ env.timestamp }} \
                     --title "Qodo Cover Update: ${{ env.timestamp }}" \
                     --body "Patch on #${{ github.event.pull_request.number }}: this PR updates now.txt with the current timestamp."
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      shell: bash